program             declaration* EOF ;
declaration         funDecl | varDecl | statement | classDecl ;
classDecl           "class" IDENTIFIER "{" function* "}" ;
funDecl             "fun" function ;
function            IDENTIFIER "(" parameters? ")" block ;
parameters          IDENTIFIER ( "," IDENTIFIER )* ;
varDecl             "var" IDENTIFIER ( "=" expression )? ";" ;
statement           exprStmt | printStmt | block | ifStmt | whileStmt | forStmt | returnStmt ;
returnStmt          "return" expression? ";"
ifStmt              "if" "(" expression ")" statement ("else" statement)? ;
exprStmt            expression ";" ;
printStmt           "print" expression ";" ;
block               "{" declaration* "}" ;
whileStmt           "while" "(" expression ")" statement ;
forStmt             "for" "(" (varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement ;
expression          assignment ;
assignment          IDENTIFIER "=" assignment | logic_or ;
logic_or            logic_and ( "or" logic_and )* ;
logic_and           equality ( "and" equality )* ;
equality            comparison ( ( "!=" | "==" ) comparison )* ;
comparison          term ( ( "<" | "<=" | ">" | ">=" ) term )* ;
term                factor ( ("+" | "-" ) factor )* ;
factor              unary ( ( "*" | "/" ) unary )* ;
unary               ( "-" | "!" ) unary | call ;
call                primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
arguments           expression ( "," expression )* ;
primary             NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER ;